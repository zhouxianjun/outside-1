//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var PublicStruct_ttypes = require('./PublicStruct_types');


var ttypes = require('./ClientService_types');
//HELPER FUNCTIONS AND STRUCTURES

var ClientService_activate_args = function(args) {
  this.bean = null;
  if (args) {
    if (args.bean !== undefined && args.bean !== null) {
      this.bean = new PublicStruct_ttypes.ClientStruct(args.bean);
    }
  }
};
ClientService_activate_args.prototype = {};
ClientService_activate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.bean = new PublicStruct_ttypes.ClientStruct();
        this.bean.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_activate_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_activate_args');
  if (this.bean !== null && this.bean !== undefined) {
    output.writeFieldBegin('bean', Thrift.Type.STRUCT, 1);
    this.bean.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_activate_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof PublicStruct_ttypes.InvalidOperation) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new PublicStruct_ttypes.ActivateStruct(args.success);
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
ClientService_activate_result.prototype = {};
ClientService_activate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new PublicStruct_ttypes.ActivateStruct();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new PublicStruct_ttypes.InvalidOperation();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_activate_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_activate_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_check_args = function(args) {
  this.sign = null;
  this.noncestr = null;
  this.md5 = null;
  if (args) {
    if (args.sign !== undefined && args.sign !== null) {
      this.sign = args.sign;
    }
    if (args.noncestr !== undefined && args.noncestr !== null) {
      this.noncestr = args.noncestr;
    }
    if (args.md5 !== undefined && args.md5 !== null) {
      this.md5 = args.md5;
    }
  }
};
ClientService_check_args.prototype = {};
ClientService_check_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.sign = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.noncestr = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.md5 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_check_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_check_args');
  if (this.sign !== null && this.sign !== undefined) {
    output.writeFieldBegin('sign', Thrift.Type.STRING, 1);
    output.writeString(this.sign);
    output.writeFieldEnd();
  }
  if (this.noncestr !== null && this.noncestr !== undefined) {
    output.writeFieldBegin('noncestr', Thrift.Type.STRING, 2);
    output.writeString(this.noncestr);
    output.writeFieldEnd();
  }
  if (this.md5 !== null && this.md5 !== undefined) {
    output.writeFieldBegin('md5', Thrift.Type.STRING, 3);
    output.writeString(this.md5);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_check_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof PublicStruct_ttypes.InvalidOperation) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new PublicStruct_ttypes.CheckResultStruct(args.success);
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
ClientService_check_result.prototype = {};
ClientService_check_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new PublicStruct_ttypes.CheckResultStruct();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new PublicStruct_ttypes.InvalidOperation();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_check_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_check_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_page_args = function(args) {
  this.page = null;
  if (args) {
    if (args.page !== undefined && args.page !== null) {
      this.page = new PublicStruct_ttypes.PageParamStruct(args.page);
    }
  }
};
ClientService_page_args.prototype = {};
ClientService_page_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.page = new PublicStruct_ttypes.PageParamStruct();
        this.page.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_page_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_page_args');
  if (this.page !== null && this.page !== undefined) {
    output.writeFieldBegin('page', Thrift.Type.STRUCT, 1);
    this.page.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_page_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof PublicStruct_ttypes.InvalidOperation) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new PublicStruct_ttypes.PageStruct(args.success);
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
ClientService_page_result.prototype = {};
ClientService_page_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new PublicStruct_ttypes.PageStruct();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new PublicStruct_ttypes.InvalidOperation();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_page_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_page_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_getByAccessId_args = function(args) {
  this.accessId = null;
  if (args) {
    if (args.accessId !== undefined && args.accessId !== null) {
      this.accessId = args.accessId;
    }
  }
};
ClientService_getByAccessId_args.prototype = {};
ClientService_getByAccessId_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.accessId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_getByAccessId_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_getByAccessId_args');
  if (this.accessId !== null && this.accessId !== undefined) {
    output.writeFieldBegin('accessId', Thrift.Type.STRING, 1);
    output.writeString(this.accessId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_getByAccessId_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof PublicStruct_ttypes.InvalidOperation) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new PublicStruct_ttypes.ClientStruct(args.success);
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
ClientService_getByAccessId_result.prototype = {};
ClientService_getByAccessId_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new PublicStruct_ttypes.ClientStruct();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new PublicStruct_ttypes.InvalidOperation();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_getByAccessId_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_getByAccessId_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
ClientServiceClient.prototype = {};
ClientServiceClient.prototype.seqid = function() { return this._seqid; };
ClientServiceClient.prototype.new_seqid = function() { return this._seqid += 1; };
ClientServiceClient.prototype.activate = function(bean, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_activate(bean);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_activate(bean);
  }
};

ClientServiceClient.prototype.send_activate = function(bean) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('activate', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_activate_args();
  args.bean = bean;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_activate = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_activate_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex) {
    return callback(result.ex);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('activate failed: unknown result');
};
ClientServiceClient.prototype.check = function(sign, noncestr, md5, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_check(sign, noncestr, md5);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_check(sign, noncestr, md5);
  }
};

ClientServiceClient.prototype.send_check = function(sign, noncestr, md5) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('check', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_check_args();
  args.sign = sign;
  args.noncestr = noncestr;
  args.md5 = md5;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_check = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_check_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex) {
    return callback(result.ex);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('check failed: unknown result');
};
ClientServiceClient.prototype.page = function(page, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_page(page);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_page(page);
  }
};

ClientServiceClient.prototype.send_page = function(page) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('page', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_page_args();
  args.page = page;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_page = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_page_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex) {
    return callback(result.ex);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('page failed: unknown result');
};
ClientServiceClient.prototype.getByAccessId = function(accessId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getByAccessId(accessId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getByAccessId(accessId);
  }
};

ClientServiceClient.prototype.send_getByAccessId = function(accessId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getByAccessId', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_getByAccessId_args();
  args.accessId = accessId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_getByAccessId = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_getByAccessId_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex) {
    return callback(result.ex);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getByAccessId failed: unknown result');
};
var ClientServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler;
}
;
ClientServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}
;
ClientServiceProcessor.prototype.process_activate = function(seqid, input, output) {
  var args = new ClientService_activate_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.activate.length === 1) {
    Q.fcall(this._handler.activate, args.bean)
      .then(function(result) {
        var result_obj = new ClientService_activate_result({success: result});
        output.writeMessageBegin("activate", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof PublicStruct_ttypes.InvalidOperation) {
          result = new ClientService_activate_result(err);
          output.writeMessageBegin("activate", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("activate", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.activate(args.bean, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof PublicStruct_ttypes.InvalidOperation) {
        result_obj = new ClientService_activate_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("activate", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("activate", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_check = function(seqid, input, output) {
  var args = new ClientService_check_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.check.length === 3) {
    Q.fcall(this._handler.check, args.sign, args.noncestr, args.md5)
      .then(function(result) {
        var result_obj = new ClientService_check_result({success: result});
        output.writeMessageBegin("check", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof PublicStruct_ttypes.InvalidOperation) {
          result = new ClientService_check_result(err);
          output.writeMessageBegin("check", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("check", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.check(args.sign, args.noncestr, args.md5, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof PublicStruct_ttypes.InvalidOperation) {
        result_obj = new ClientService_check_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("check", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("check", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_page = function(seqid, input, output) {
  var args = new ClientService_page_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.page.length === 1) {
    Q.fcall(this._handler.page, args.page)
      .then(function(result) {
        var result_obj = new ClientService_page_result({success: result});
        output.writeMessageBegin("page", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof PublicStruct_ttypes.InvalidOperation) {
          result = new ClientService_page_result(err);
          output.writeMessageBegin("page", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("page", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.page(args.page, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof PublicStruct_ttypes.InvalidOperation) {
        result_obj = new ClientService_page_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("page", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("page", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_getByAccessId = function(seqid, input, output) {
  var args = new ClientService_getByAccessId_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getByAccessId.length === 1) {
    Q.fcall(this._handler.getByAccessId, args.accessId)
      .then(function(result) {
        var result_obj = new ClientService_getByAccessId_result({success: result});
        output.writeMessageBegin("getByAccessId", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof PublicStruct_ttypes.InvalidOperation) {
          result = new ClientService_getByAccessId_result(err);
          output.writeMessageBegin("getByAccessId", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getByAccessId", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getByAccessId(args.accessId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof PublicStruct_ttypes.InvalidOperation) {
        result_obj = new ClientService_getByAccessId_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getByAccessId", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getByAccessId", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
