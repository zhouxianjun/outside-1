//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
ttypes.PushType = {
  'AD' : 1000,
  'APP_INSTALL' : 1001,
  'CMD_AD_CONTENT_CHANGE' : 1002,
  'CMD_FAULT_CLICK_RATE' : 1003,
  'CMD_SHOW_RATE' : 1004,
  'CMD_COUNT_DOWN' : 1005
};
ttypes.PushMode = {
  'TEST' : 2000,
  'PRODUCTION' : 2001
};
ttypes.ResourcesType = {
  'IMAGE' : 3000,
  'HTML' : 3001,
  'APP' : 3002
};
ttypes.ResourcesFeedbackStatus = {
  'ERROR' : 4000,
  'INSTALL_SUCCESS' : 4001,
  'INSTALL_FAIL' : 4002,
  'UNINSTALL' : 4003,
  'OPEN_APP' : 4004,
  'HAS_MAX' : 4005,
  'REPEAT' : 4006
};
ttypes.TempleType = {
  'FULL' : 6000,
  'INSERT' : 6001,
  'BANNER' : 6002,
  'FLOAT' : 6003
};
ttypes.Position = {
  'INDEX' : 5000,
  'SAULT_CENTER' : 5001,
  'SAULT_DOWN_BANNER' : 5002,
  'SEACHER_CENTER' : 5003,
  'SEACHER_DOWN_BANNER' : 5004,
  'STATUS_BAR' : 5005,
  'DESKTOP_CENTER' : 5006,
  'FLOAT' : 5007
};
ttypes.ADSupportType = {
  'SDK' : 8000,
  'API' : 8001
};
var RoleStruct = module.exports.RoleStruct = function(args) {
  this.id = null;
  this.name = null;
  this.pid = null;
  this.create_time = null;
  this.update_time = null;
  this.status = null;
  this.ow = null;
  this.only_login = null;
  this.type = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.pid !== undefined && args.pid !== null) {
      this.pid = args.pid;
    }
    if (args.create_time !== undefined && args.create_time !== null) {
      this.create_time = args.create_time;
    }
    if (args.update_time !== undefined && args.update_time !== null) {
      this.update_time = args.update_time;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
    if (args.ow !== undefined && args.ow !== null) {
      this.ow = args.ow;
    }
    if (args.only_login !== undefined && args.only_login !== null) {
      this.only_login = args.only_login;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
  }
};
RoleStruct.prototype = {};
RoleStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.pid = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.create_time = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.update_time = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.status = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BOOL) {
        this.ow = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.BOOL) {
        this.only_login = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RoleStruct.prototype.write = function(output) {
  output.writeStructBegin('RoleStruct');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.pid !== null && this.pid !== undefined) {
    output.writeFieldBegin('pid', Thrift.Type.I32, 3);
    output.writeI32(this.pid);
    output.writeFieldEnd();
  }
  if (this.create_time !== null && this.create_time !== undefined) {
    output.writeFieldBegin('create_time', Thrift.Type.I64, 5);
    output.writeI64(this.create_time);
    output.writeFieldEnd();
  }
  if (this.update_time !== null && this.update_time !== undefined) {
    output.writeFieldBegin('update_time', Thrift.Type.I64, 6);
    output.writeI64(this.update_time);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.BOOL, 7);
    output.writeBool(this.status);
    output.writeFieldEnd();
  }
  if (this.ow !== null && this.ow !== undefined) {
    output.writeFieldBegin('ow', Thrift.Type.BOOL, 8);
    output.writeBool(this.ow);
    output.writeFieldEnd();
  }
  if (this.only_login !== null && this.only_login !== undefined) {
    output.writeFieldBegin('only_login', Thrift.Type.BOOL, 9);
    output.writeBool(this.only_login);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 10);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MenuStruct = module.exports.MenuStruct = function(args) {
  this.id = null;
  this.name = null;
  this.pid = null;
  this.description = null;
  this.seq = null;
  this.status = null;
  this.create_time = null;
  this.path = null;
  this.target = null;
  this.icon = null;
  this.ow = null;
  this.show = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.pid !== undefined && args.pid !== null) {
      this.pid = args.pid;
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    }
    if (args.seq !== undefined && args.seq !== null) {
      this.seq = args.seq;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
    if (args.create_time !== undefined && args.create_time !== null) {
      this.create_time = args.create_time;
    }
    if (args.path !== undefined && args.path !== null) {
      this.path = args.path;
    }
    if (args.target !== undefined && args.target !== null) {
      this.target = args.target;
    }
    if (args.icon !== undefined && args.icon !== null) {
      this.icon = args.icon;
    }
    if (args.ow !== undefined && args.ow !== null) {
      this.ow = args.ow;
    }
    if (args.show !== undefined && args.show !== null) {
      this.show = args.show;
    }
  }
};
MenuStruct.prototype = {};
MenuStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.pid = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.seq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.status = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.create_time = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.path = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.target = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.icon = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.BOOL) {
        this.ow = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.BOOL) {
        this.show = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MenuStruct.prototype.write = function(output) {
  output.writeStructBegin('MenuStruct');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.pid !== null && this.pid !== undefined) {
    output.writeFieldBegin('pid', Thrift.Type.I32, 3);
    output.writeI32(this.pid);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 4);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.seq !== null && this.seq !== undefined) {
    output.writeFieldBegin('seq', Thrift.Type.I32, 5);
    output.writeI32(this.seq);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.BOOL, 6);
    output.writeBool(this.status);
    output.writeFieldEnd();
  }
  if (this.create_time !== null && this.create_time !== undefined) {
    output.writeFieldBegin('create_time', Thrift.Type.I64, 7);
    output.writeI64(this.create_time);
    output.writeFieldEnd();
  }
  if (this.path !== null && this.path !== undefined) {
    output.writeFieldBegin('path', Thrift.Type.STRING, 8);
    output.writeString(this.path);
    output.writeFieldEnd();
  }
  if (this.target !== null && this.target !== undefined) {
    output.writeFieldBegin('target', Thrift.Type.STRING, 9);
    output.writeString(this.target);
    output.writeFieldEnd();
  }
  if (this.icon !== null && this.icon !== undefined) {
    output.writeFieldBegin('icon', Thrift.Type.STRING, 10);
    output.writeString(this.icon);
    output.writeFieldEnd();
  }
  if (this.ow !== null && this.ow !== undefined) {
    output.writeFieldBegin('ow', Thrift.Type.BOOL, 11);
    output.writeBool(this.ow);
    output.writeFieldEnd();
  }
  if (this.show !== null && this.show !== undefined) {
    output.writeFieldBegin('show', Thrift.Type.BOOL, 12);
    output.writeBool(this.show);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InterfaceStruct = module.exports.InterfaceStruct = function(args) {
  this.id = null;
  this.name = null;
  this.auth = null;
  this.description = null;
  this.seq = null;
  this.status = null;
  this.create_time = null;
  this.ow = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.auth !== undefined && args.auth !== null) {
      this.auth = args.auth;
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    }
    if (args.seq !== undefined && args.seq !== null) {
      this.seq = args.seq;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
    if (args.create_time !== undefined && args.create_time !== null) {
      this.create_time = args.create_time;
    }
    if (args.ow !== undefined && args.ow !== null) {
      this.ow = args.ow;
    }
  }
};
InterfaceStruct.prototype = {};
InterfaceStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.auth = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.seq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.status = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.create_time = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BOOL) {
        this.ow = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InterfaceStruct.prototype.write = function(output) {
  output.writeStructBegin('InterfaceStruct');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.auth !== null && this.auth !== undefined) {
    output.writeFieldBegin('auth', Thrift.Type.STRING, 3);
    output.writeString(this.auth);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 4);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.seq !== null && this.seq !== undefined) {
    output.writeFieldBegin('seq', Thrift.Type.I32, 5);
    output.writeI32(this.seq);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.BOOL, 6);
    output.writeBool(this.status);
    output.writeFieldEnd();
  }
  if (this.create_time !== null && this.create_time !== undefined) {
    output.writeFieldBegin('create_time', Thrift.Type.I64, 7);
    output.writeI64(this.create_time);
    output.writeFieldEnd();
  }
  if (this.ow !== null && this.ow !== undefined) {
    output.writeFieldBegin('ow', Thrift.Type.BOOL, 8);
    output.writeBool(this.ow);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UserStruct = module.exports.UserStruct = function(args) {
  this.id = null;
  this.username = null;
  this.password = null;
  this.name = null;
  this.real_name = null;
  this.company = null;
  this.city = null;
  this.province = null;
  this.email = null;
  this.phone = null;
  this.create_time = null;
  this.status = null;
  this.pid = null;
  this.pids = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.username !== undefined && args.username !== null) {
      this.username = args.username;
    }
    if (args.password !== undefined && args.password !== null) {
      this.password = args.password;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.real_name !== undefined && args.real_name !== null) {
      this.real_name = args.real_name;
    }
    if (args.company !== undefined && args.company !== null) {
      this.company = args.company;
    }
    if (args.city !== undefined && args.city !== null) {
      this.city = args.city;
    }
    if (args.province !== undefined && args.province !== null) {
      this.province = args.province;
    }
    if (args.email !== undefined && args.email !== null) {
      this.email = args.email;
    }
    if (args.phone !== undefined && args.phone !== null) {
      this.phone = args.phone;
    }
    if (args.create_time !== undefined && args.create_time !== null) {
      this.create_time = args.create_time;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
    if (args.pid !== undefined && args.pid !== null) {
      this.pid = args.pid;
    }
    if (args.pids !== undefined && args.pids !== null) {
      this.pids = args.pids;
    }
  }
};
UserStruct.prototype = {};
UserStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.real_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.company = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.city = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.province = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.email = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.phone = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I64) {
        this.create_time = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.BOOL) {
        this.status = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I32) {
        this.pid = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.pids = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserStruct.prototype.write = function(output) {
  output.writeStructBegin('UserStruct');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 2);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 3);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 4);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.real_name !== null && this.real_name !== undefined) {
    output.writeFieldBegin('real_name', Thrift.Type.STRING, 5);
    output.writeString(this.real_name);
    output.writeFieldEnd();
  }
  if (this.company !== null && this.company !== undefined) {
    output.writeFieldBegin('company', Thrift.Type.STRING, 6);
    output.writeString(this.company);
    output.writeFieldEnd();
  }
  if (this.city !== null && this.city !== undefined) {
    output.writeFieldBegin('city', Thrift.Type.I32, 7);
    output.writeI32(this.city);
    output.writeFieldEnd();
  }
  if (this.province !== null && this.province !== undefined) {
    output.writeFieldBegin('province', Thrift.Type.I32, 8);
    output.writeI32(this.province);
    output.writeFieldEnd();
  }
  if (this.email !== null && this.email !== undefined) {
    output.writeFieldBegin('email', Thrift.Type.STRING, 9);
    output.writeString(this.email);
    output.writeFieldEnd();
  }
  if (this.phone !== null && this.phone !== undefined) {
    output.writeFieldBegin('phone', Thrift.Type.STRING, 10);
    output.writeString(this.phone);
    output.writeFieldEnd();
  }
  if (this.create_time !== null && this.create_time !== undefined) {
    output.writeFieldBegin('create_time', Thrift.Type.I64, 11);
    output.writeI64(this.create_time);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.BOOL, 12);
    output.writeBool(this.status);
    output.writeFieldEnd();
  }
  if (this.pid !== null && this.pid !== undefined) {
    output.writeFieldBegin('pid', Thrift.Type.I32, 13);
    output.writeI32(this.pid);
    output.writeFieldEnd();
  }
  if (this.pids !== null && this.pids !== undefined) {
    output.writeFieldBegin('pids', Thrift.Type.STRING, 14);
    output.writeString(this.pids);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PageParamStruct = module.exports.PageParamStruct = function(args) {
  this.page = 1;
  this.pageSize = 15;
  this.sortName = null;
  this.sortDir = null;
  this.query = null;
  if (args) {
    if (args.page !== undefined && args.page !== null) {
      this.page = args.page;
    }
    if (args.pageSize !== undefined && args.pageSize !== null) {
      this.pageSize = args.pageSize;
    }
    if (args.sortName !== undefined && args.sortName !== null) {
      this.sortName = args.sortName;
    }
    if (args.sortDir !== undefined && args.sortDir !== null) {
      this.sortDir = args.sortDir;
    }
    if (args.query !== undefined && args.query !== null) {
      this.query = Thrift.copyMap(args.query, [null]);
    }
  }
};
PageParamStruct.prototype = {};
PageParamStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.page = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.pageSize = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.sortName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.sortDir = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.MAP) {
        var _size0 = 0;
        var _rtmp34;
        this.query = {};
        var _ktype1 = 0;
        var _vtype2 = 0;
        _rtmp34 = input.readMapBegin();
        _ktype1 = _rtmp34.ktype;
        _vtype2 = _rtmp34.vtype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var key6 = null;
          var val7 = null;
          key6 = input.readString();
          val7 = input.readString();
          this.query[key6] = val7;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PageParamStruct.prototype.write = function(output) {
  output.writeStructBegin('PageParamStruct');
  if (this.page !== null && this.page !== undefined) {
    output.writeFieldBegin('page', Thrift.Type.I32, 1);
    output.writeI32(this.page);
    output.writeFieldEnd();
  }
  if (this.pageSize !== null && this.pageSize !== undefined) {
    output.writeFieldBegin('pageSize', Thrift.Type.I32, 2);
    output.writeI32(this.pageSize);
    output.writeFieldEnd();
  }
  if (this.sortName !== null && this.sortName !== undefined) {
    output.writeFieldBegin('sortName', Thrift.Type.STRING, 3);
    output.writeString(this.sortName);
    output.writeFieldEnd();
  }
  if (this.sortDir !== null && this.sortDir !== undefined) {
    output.writeFieldBegin('sortDir', Thrift.Type.STRING, 4);
    output.writeString(this.sortDir);
    output.writeFieldEnd();
  }
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.MAP, 5);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.query));
    for (var kiter8 in this.query)
    {
      if (this.query.hasOwnProperty(kiter8))
      {
        var viter9 = this.query[kiter8];
        output.writeString(kiter8);
        output.writeString(viter9);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PageStruct = module.exports.PageStruct = function(args) {
  this.pageNum = null;
  this.pageSize = null;
  this.count = null;
  this.current = null;
  this.items = null;
  this.query = null;
  if (args) {
    if (args.pageNum !== undefined && args.pageNum !== null) {
      this.pageNum = args.pageNum;
    }
    if (args.pageSize !== undefined && args.pageSize !== null) {
      this.pageSize = args.pageSize;
    }
    if (args.count !== undefined && args.count !== null) {
      this.count = args.count;
    }
    if (args.current !== undefined && args.current !== null) {
      this.current = args.current;
    }
    if (args.items !== undefined && args.items !== null) {
      this.items = args.items;
    }
    if (args.query !== undefined && args.query !== null) {
      this.query = Thrift.copyMap(args.query, [null]);
    }
  }
};
PageStruct.prototype = {};
PageStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.pageNum = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.pageSize = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.count = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.current = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.items = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.MAP) {
        var _size10 = 0;
        var _rtmp314;
        this.query = {};
        var _ktype11 = 0;
        var _vtype12 = 0;
        _rtmp314 = input.readMapBegin();
        _ktype11 = _rtmp314.ktype;
        _vtype12 = _rtmp314.vtype;
        _size10 = _rtmp314.size;
        for (var _i15 = 0; _i15 < _size10; ++_i15)
        {
          var key16 = null;
          var val17 = null;
          key16 = input.readString();
          val17 = input.readString();
          this.query[key16] = val17;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PageStruct.prototype.write = function(output) {
  output.writeStructBegin('PageStruct');
  if (this.pageNum !== null && this.pageNum !== undefined) {
    output.writeFieldBegin('pageNum', Thrift.Type.I32, 1);
    output.writeI32(this.pageNum);
    output.writeFieldEnd();
  }
  if (this.pageSize !== null && this.pageSize !== undefined) {
    output.writeFieldBegin('pageSize', Thrift.Type.I32, 2);
    output.writeI32(this.pageSize);
    output.writeFieldEnd();
  }
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.I32, 3);
    output.writeI32(this.count);
    output.writeFieldEnd();
  }
  if (this.current !== null && this.current !== undefined) {
    output.writeFieldBegin('current', Thrift.Type.I32, 4);
    output.writeI32(this.current);
    output.writeFieldEnd();
  }
  if (this.items !== null && this.items !== undefined) {
    output.writeFieldBegin('items', Thrift.Type.STRING, 5);
    output.writeString(this.items);
    output.writeFieldEnd();
  }
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.MAP, 6);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.query));
    for (var kiter18 in this.query)
    {
      if (this.query.hasOwnProperty(kiter18))
      {
        var viter19 = this.query[kiter18];
        output.writeString(kiter18);
        output.writeString(viter19);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminLoggerStruct = module.exports.AdminLoggerStruct = function(args) {
  this.id = null;
  this.user = null;
  this.ip = null;
  this.path = null;
  this.ms = null;
  this.params = null;
  this.body = null;
  this.method = null;
  this.create_time = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.user !== undefined && args.user !== null) {
      this.user = args.user;
    }
    if (args.ip !== undefined && args.ip !== null) {
      this.ip = args.ip;
    }
    if (args.path !== undefined && args.path !== null) {
      this.path = args.path;
    }
    if (args.ms !== undefined && args.ms !== null) {
      this.ms = args.ms;
    }
    if (args.params !== undefined && args.params !== null) {
      this.params = args.params;
    }
    if (args.body !== undefined && args.body !== null) {
      this.body = args.body;
    }
    if (args.method !== undefined && args.method !== null) {
      this.method = args.method;
    }
    if (args.create_time !== undefined && args.create_time !== null) {
      this.create_time = args.create_time;
    }
  }
};
AdminLoggerStruct.prototype = {};
AdminLoggerStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.user = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.ip = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.path = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.ms = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.params = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.body = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.method = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I64) {
        this.create_time = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminLoggerStruct.prototype.write = function(output) {
  output.writeStructBegin('AdminLoggerStruct');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.I32, 2);
    output.writeI32(this.user);
    output.writeFieldEnd();
  }
  if (this.ip !== null && this.ip !== undefined) {
    output.writeFieldBegin('ip', Thrift.Type.STRING, 3);
    output.writeString(this.ip);
    output.writeFieldEnd();
  }
  if (this.path !== null && this.path !== undefined) {
    output.writeFieldBegin('path', Thrift.Type.STRING, 4);
    output.writeString(this.path);
    output.writeFieldEnd();
  }
  if (this.ms !== null && this.ms !== undefined) {
    output.writeFieldBegin('ms', Thrift.Type.I32, 5);
    output.writeI32(this.ms);
    output.writeFieldEnd();
  }
  if (this.params !== null && this.params !== undefined) {
    output.writeFieldBegin('params', Thrift.Type.STRING, 6);
    output.writeString(this.params);
    output.writeFieldEnd();
  }
  if (this.body !== null && this.body !== undefined) {
    output.writeFieldBegin('body', Thrift.Type.STRING, 7);
    output.writeString(this.body);
    output.writeFieldEnd();
  }
  if (this.method !== null && this.method !== undefined) {
    output.writeFieldBegin('method', Thrift.Type.STRING, 8);
    output.writeString(this.method);
    output.writeFieldEnd();
  }
  if (this.create_time !== null && this.create_time !== undefined) {
    output.writeFieldBegin('create_time', Thrift.Type.I64, 9);
    output.writeI64(this.create_time);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ResourcesStruct = module.exports.ResourcesStruct = function(args) {
  this.id = null;
  this.type = null;
  this.path = null;
  this.md5 = null;
  this.size = null;
  this.name = null;
  this.pkg = null;
  this.user = null;
  this.create_time = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.path !== undefined && args.path !== null) {
      this.path = args.path;
    }
    if (args.md5 !== undefined && args.md5 !== null) {
      this.md5 = args.md5;
    }
    if (args.size !== undefined && args.size !== null) {
      this.size = args.size;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.pkg !== undefined && args.pkg !== null) {
      this.pkg = args.pkg;
    }
    if (args.user !== undefined && args.user !== null) {
      this.user = args.user;
    }
    if (args.create_time !== undefined && args.create_time !== null) {
      this.create_time = args.create_time;
    }
  }
};
ResourcesStruct.prototype = {};
ResourcesStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.path = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.md5 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.size = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.pkg = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.user = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I64) {
        this.create_time = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ResourcesStruct.prototype.write = function(output) {
  output.writeStructBegin('ResourcesStruct');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 2);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.path !== null && this.path !== undefined) {
    output.writeFieldBegin('path', Thrift.Type.STRING, 3);
    output.writeString(this.path);
    output.writeFieldEnd();
  }
  if (this.md5 !== null && this.md5 !== undefined) {
    output.writeFieldBegin('md5', Thrift.Type.STRING, 4);
    output.writeString(this.md5);
    output.writeFieldEnd();
  }
  if (this.size !== null && this.size !== undefined) {
    output.writeFieldBegin('size', Thrift.Type.I32, 5);
    output.writeI32(this.size);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 6);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.pkg !== null && this.pkg !== undefined) {
    output.writeFieldBegin('pkg', Thrift.Type.STRING, 7);
    output.writeString(this.pkg);
    output.writeFieldEnd();
  }
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.I32, 8);
    output.writeI32(this.user);
    output.writeFieldEnd();
  }
  if (this.create_time !== null && this.create_time !== undefined) {
    output.writeFieldBegin('create_time', Thrift.Type.I64, 9);
    output.writeI64(this.create_time);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ResourcesFeedbackReqStruct = module.exports.ResourcesFeedbackReqStruct = function(args) {
  this.id = null;
  this.md5 = null;
  this.ext = null;
  this.status = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.md5 !== undefined && args.md5 !== null) {
      this.md5 = args.md5;
    }
    if (args.ext !== undefined && args.ext !== null) {
      this.ext = args.ext;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
  }
};
ResourcesFeedbackReqStruct.prototype = {};
ResourcesFeedbackReqStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.md5 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.ext = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ResourcesFeedbackReqStruct.prototype.write = function(output) {
  output.writeStructBegin('ResourcesFeedbackReqStruct');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.md5 !== null && this.md5 !== undefined) {
    output.writeFieldBegin('md5', Thrift.Type.STRING, 2);
    output.writeString(this.md5);
    output.writeFieldEnd();
  }
  if (this.ext !== null && this.ext !== undefined) {
    output.writeFieldBegin('ext', Thrift.Type.STRING, 3);
    output.writeString(this.ext);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 4);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ResourcesFeedbackStruct = module.exports.ResourcesFeedbackStruct = function(args) {
  this.id = null;
  this.push = null;
  this.client = null;
  this.ad = null;
  this.resources = null;
  this.ext = null;
  this.status = null;
  this.create_time = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.push !== undefined && args.push !== null) {
      this.push = args.push;
    }
    if (args.client !== undefined && args.client !== null) {
      this.client = args.client;
    }
    if (args.ad !== undefined && args.ad !== null) {
      this.ad = args.ad;
    }
    if (args.resources !== undefined && args.resources !== null) {
      this.resources = args.resources;
    }
    if (args.ext !== undefined && args.ext !== null) {
      this.ext = args.ext;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
    if (args.create_time !== undefined && args.create_time !== null) {
      this.create_time = args.create_time;
    }
  }
};
ResourcesFeedbackStruct.prototype = {};
ResourcesFeedbackStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.push = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.client = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.ad = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.resources = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.ext = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.create_time = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ResourcesFeedbackStruct.prototype.write = function(output) {
  output.writeStructBegin('ResourcesFeedbackStruct');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.push !== null && this.push !== undefined) {
    output.writeFieldBegin('push', Thrift.Type.I32, 2);
    output.writeI32(this.push);
    output.writeFieldEnd();
  }
  if (this.client !== null && this.client !== undefined) {
    output.writeFieldBegin('client', Thrift.Type.I32, 3);
    output.writeI32(this.client);
    output.writeFieldEnd();
  }
  if (this.ad !== null && this.ad !== undefined) {
    output.writeFieldBegin('ad', Thrift.Type.I32, 4);
    output.writeI32(this.ad);
    output.writeFieldEnd();
  }
  if (this.resources !== null && this.resources !== undefined) {
    output.writeFieldBegin('resources', Thrift.Type.I32, 5);
    output.writeI32(this.resources);
    output.writeFieldEnd();
  }
  if (this.ext !== null && this.ext !== undefined) {
    output.writeFieldBegin('ext', Thrift.Type.STRING, 6);
    output.writeString(this.ext);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 7);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.create_time !== null && this.create_time !== undefined) {
    output.writeFieldBegin('create_time', Thrift.Type.I64, 8);
    output.writeI64(this.create_time);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PushStruct = module.exports.PushStruct = function(args) {
  this.id = null;
  this.type = null;
  this.uuid = null;
  this.filter = null;
  this.body = null;
  this.content = null;
  this.description = null;
  this.user = null;
  this.start_time = null;
  this.expire_time = null;
  this.max_send_num = null;
  this.mode = null;
  this.create_time = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.uuid !== undefined && args.uuid !== null) {
      this.uuid = args.uuid;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = args.filter;
    }
    if (args.body !== undefined && args.body !== null) {
      this.body = args.body;
    }
    if (args.content !== undefined && args.content !== null) {
      this.content = args.content;
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    }
    if (args.user !== undefined && args.user !== null) {
      this.user = args.user;
    }
    if (args.start_time !== undefined && args.start_time !== null) {
      this.start_time = args.start_time;
    }
    if (args.expire_time !== undefined && args.expire_time !== null) {
      this.expire_time = args.expire_time;
    }
    if (args.max_send_num !== undefined && args.max_send_num !== null) {
      this.max_send_num = args.max_send_num;
    }
    if (args.mode !== undefined && args.mode !== null) {
      this.mode = args.mode;
    }
    if (args.create_time !== undefined && args.create_time !== null) {
      this.create_time = args.create_time;
    }
  }
};
PushStruct.prototype = {};
PushStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.uuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.filter = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.body = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.content = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.user = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I64) {
        this.start_time = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I64) {
        this.expire_time = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I32) {
        this.max_send_num = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I32) {
        this.mode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I64) {
        this.create_time = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PushStruct.prototype.write = function(output) {
  output.writeStructBegin('PushStruct');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 2);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.uuid !== null && this.uuid !== undefined) {
    output.writeFieldBegin('uuid', Thrift.Type.STRING, 3);
    output.writeString(this.uuid);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRING, 4);
    output.writeString(this.filter);
    output.writeFieldEnd();
  }
  if (this.body !== null && this.body !== undefined) {
    output.writeFieldBegin('body', Thrift.Type.STRING, 5);
    output.writeString(this.body);
    output.writeFieldEnd();
  }
  if (this.content !== null && this.content !== undefined) {
    output.writeFieldBegin('content', Thrift.Type.STRING, 6);
    output.writeString(this.content);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 7);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.I32, 8);
    output.writeI32(this.user);
    output.writeFieldEnd();
  }
  if (this.start_time !== null && this.start_time !== undefined) {
    output.writeFieldBegin('start_time', Thrift.Type.I64, 9);
    output.writeI64(this.start_time);
    output.writeFieldEnd();
  }
  if (this.expire_time !== null && this.expire_time !== undefined) {
    output.writeFieldBegin('expire_time', Thrift.Type.I64, 10);
    output.writeI64(this.expire_time);
    output.writeFieldEnd();
  }
  if (this.max_send_num !== null && this.max_send_num !== undefined) {
    output.writeFieldBegin('max_send_num', Thrift.Type.I32, 11);
    output.writeI32(this.max_send_num);
    output.writeFieldEnd();
  }
  if (this.mode !== null && this.mode !== undefined) {
    output.writeFieldBegin('mode', Thrift.Type.I32, 12);
    output.writeI32(this.mode);
    output.writeFieldEnd();
  }
  if (this.create_time !== null && this.create_time !== undefined) {
    output.writeFieldBegin('create_time', Thrift.Type.I64, 13);
    output.writeI64(this.create_time);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientStruct = module.exports.ClientStruct = function(args) {
  this.id = null;
  this.imei = null;
  this.device_id = null;
  this.phone = null;
  this.model = null;
  this.access_id = null;
  this.access_key = null;
  this.umeng_token = null;
  this.ip = null;
  this.version = null;
  this.create_time = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.imei !== undefined && args.imei !== null) {
      this.imei = args.imei;
    }
    if (args.device_id !== undefined && args.device_id !== null) {
      this.device_id = args.device_id;
    }
    if (args.phone !== undefined && args.phone !== null) {
      this.phone = args.phone;
    }
    if (args.model !== undefined && args.model !== null) {
      this.model = args.model;
    }
    if (args.access_id !== undefined && args.access_id !== null) {
      this.access_id = args.access_id;
    }
    if (args.access_key !== undefined && args.access_key !== null) {
      this.access_key = args.access_key;
    }
    if (args.umeng_token !== undefined && args.umeng_token !== null) {
      this.umeng_token = args.umeng_token;
    }
    if (args.ip !== undefined && args.ip !== null) {
      this.ip = args.ip;
    }
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
    if (args.create_time !== undefined && args.create_time !== null) {
      this.create_time = args.create_time;
    }
  }
};
ClientStruct.prototype = {};
ClientStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.imei = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.device_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.phone = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.model = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.access_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.access_key = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.umeng_token = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.ip = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.version = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I64) {
        this.create_time = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientStruct.prototype.write = function(output) {
  output.writeStructBegin('ClientStruct');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.imei !== null && this.imei !== undefined) {
    output.writeFieldBegin('imei', Thrift.Type.STRING, 2);
    output.writeString(this.imei);
    output.writeFieldEnd();
  }
  if (this.device_id !== null && this.device_id !== undefined) {
    output.writeFieldBegin('device_id', Thrift.Type.STRING, 3);
    output.writeString(this.device_id);
    output.writeFieldEnd();
  }
  if (this.phone !== null && this.phone !== undefined) {
    output.writeFieldBegin('phone', Thrift.Type.STRING, 4);
    output.writeString(this.phone);
    output.writeFieldEnd();
  }
  if (this.model !== null && this.model !== undefined) {
    output.writeFieldBegin('model', Thrift.Type.STRING, 5);
    output.writeString(this.model);
    output.writeFieldEnd();
  }
  if (this.access_id !== null && this.access_id !== undefined) {
    output.writeFieldBegin('access_id', Thrift.Type.STRING, 6);
    output.writeString(this.access_id);
    output.writeFieldEnd();
  }
  if (this.access_key !== null && this.access_key !== undefined) {
    output.writeFieldBegin('access_key', Thrift.Type.STRING, 7);
    output.writeString(this.access_key);
    output.writeFieldEnd();
  }
  if (this.umeng_token !== null && this.umeng_token !== undefined) {
    output.writeFieldBegin('umeng_token', Thrift.Type.STRING, 8);
    output.writeString(this.umeng_token);
    output.writeFieldEnd();
  }
  if (this.ip !== null && this.ip !== undefined) {
    output.writeFieldBegin('ip', Thrift.Type.STRING, 9);
    output.writeString(this.ip);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.I32, 10);
    output.writeI32(this.version);
    output.writeFieldEnd();
  }
  if (this.create_time !== null && this.create_time !== undefined) {
    output.writeFieldBegin('create_time', Thrift.Type.I64, 11);
    output.writeI64(this.create_time);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdStruct = module.exports.AdStruct = function(args) {
  this.id = null;
  this.temple = null;
  this.position = null;
  this.fault_click_rate = null;
  this.show_day = null;
  this.show_time = null;
  this.show_time_start = null;
  this.show_time_end = null;
  this.count_down = null;
  this.user = null;
  this.create_time = null;
  this.name = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.temple !== undefined && args.temple !== null) {
      this.temple = args.temple;
    }
    if (args.position !== undefined && args.position !== null) {
      this.position = args.position;
    }
    if (args.fault_click_rate !== undefined && args.fault_click_rate !== null) {
      this.fault_click_rate = args.fault_click_rate;
    }
    if (args.show_day !== undefined && args.show_day !== null) {
      this.show_day = args.show_day;
    }
    if (args.show_time !== undefined && args.show_time !== null) {
      this.show_time = args.show_time;
    }
    if (args.show_time_start !== undefined && args.show_time_start !== null) {
      this.show_time_start = args.show_time_start;
    }
    if (args.show_time_end !== undefined && args.show_time_end !== null) {
      this.show_time_end = args.show_time_end;
    }
    if (args.count_down !== undefined && args.count_down !== null) {
      this.count_down = args.count_down;
    }
    if (args.user !== undefined && args.user !== null) {
      this.user = args.user;
    }
    if (args.create_time !== undefined && args.create_time !== null) {
      this.create_time = args.create_time;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
  }
};
AdStruct.prototype = {};
AdStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.temple = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.position = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.fault_click_rate = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.show_day = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.show_time = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.show_time_start = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.show_time_end = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.count_down = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.user = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I64) {
        this.create_time = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdStruct.prototype.write = function(output) {
  output.writeStructBegin('AdStruct');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.temple !== null && this.temple !== undefined) {
    output.writeFieldBegin('temple', Thrift.Type.I32, 2);
    output.writeI32(this.temple);
    output.writeFieldEnd();
  }
  if (this.position !== null && this.position !== undefined) {
    output.writeFieldBegin('position', Thrift.Type.I32, 3);
    output.writeI32(this.position);
    output.writeFieldEnd();
  }
  if (this.fault_click_rate !== null && this.fault_click_rate !== undefined) {
    output.writeFieldBegin('fault_click_rate', Thrift.Type.I32, 4);
    output.writeI32(this.fault_click_rate);
    output.writeFieldEnd();
  }
  if (this.show_day !== null && this.show_day !== undefined) {
    output.writeFieldBegin('show_day', Thrift.Type.I32, 5);
    output.writeI32(this.show_day);
    output.writeFieldEnd();
  }
  if (this.show_time !== null && this.show_time !== undefined) {
    output.writeFieldBegin('show_time', Thrift.Type.I64, 6);
    output.writeI64(this.show_time);
    output.writeFieldEnd();
  }
  if (this.show_time_start !== null && this.show_time_start !== undefined) {
    output.writeFieldBegin('show_time_start', Thrift.Type.I64, 7);
    output.writeI64(this.show_time_start);
    output.writeFieldEnd();
  }
  if (this.show_time_end !== null && this.show_time_end !== undefined) {
    output.writeFieldBegin('show_time_end', Thrift.Type.I64, 8);
    output.writeI64(this.show_time_end);
    output.writeFieldEnd();
  }
  if (this.count_down !== null && this.count_down !== undefined) {
    output.writeFieldBegin('count_down', Thrift.Type.I32, 9);
    output.writeI32(this.count_down);
    output.writeFieldEnd();
  }
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.I32, 10);
    output.writeI32(this.user);
    output.writeFieldEnd();
  }
  if (this.create_time !== null && this.create_time !== undefined) {
    output.writeFieldBegin('create_time', Thrift.Type.I64, 11);
    output.writeI64(this.create_time);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 12);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdFeedbackStruct = module.exports.AdFeedbackStruct = function(args) {
  this.id = null;
  this.push = null;
  this.ad = null;
  this.type = null;
  this.client = null;
  this.click = null;
  this.create_time = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.push !== undefined && args.push !== null) {
      this.push = args.push;
    }
    if (args.ad !== undefined && args.ad !== null) {
      this.ad = args.ad;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.client !== undefined && args.client !== null) {
      this.client = args.client;
    }
    if (args.click !== undefined && args.click !== null) {
      this.click = args.click;
    }
    if (args.create_time !== undefined && args.create_time !== null) {
      this.create_time = args.create_time;
    }
  }
};
AdFeedbackStruct.prototype = {};
AdFeedbackStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.push = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.ad = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.client = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.click = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.create_time = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdFeedbackStruct.prototype.write = function(output) {
  output.writeStructBegin('AdFeedbackStruct');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.push !== null && this.push !== undefined) {
    output.writeFieldBegin('push', Thrift.Type.I32, 2);
    output.writeI32(this.push);
    output.writeFieldEnd();
  }
  if (this.ad !== null && this.ad !== undefined) {
    output.writeFieldBegin('ad', Thrift.Type.I32, 3);
    output.writeI32(this.ad);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 4);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.client !== null && this.client !== undefined) {
    output.writeFieldBegin('client', Thrift.Type.I32, 5);
    output.writeI32(this.client);
    output.writeFieldEnd();
  }
  if (this.click !== null && this.click !== undefined) {
    output.writeFieldBegin('click', Thrift.Type.I64, 6);
    output.writeI64(this.click);
    output.writeFieldEnd();
  }
  if (this.create_time !== null && this.create_time !== undefined) {
    output.writeFieldBegin('create_time', Thrift.Type.I64, 7);
    output.writeI64(this.create_time);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdResourcesStruct = module.exports.AdResourcesStruct = function(args) {
  this.id = null;
  this.ad = null;
  this.resources = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.ad !== undefined && args.ad !== null) {
      this.ad = args.ad;
    }
    if (args.resources !== undefined && args.resources !== null) {
      this.resources = args.resources;
    }
  }
};
AdResourcesStruct.prototype = {};
AdResourcesStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.ad = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.resources = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdResourcesStruct.prototype.write = function(output) {
  output.writeStructBegin('AdResourcesStruct');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.ad !== null && this.ad !== undefined) {
    output.writeFieldBegin('ad', Thrift.Type.I32, 2);
    output.writeI32(this.ad);
    output.writeFieldEnd();
  }
  if (this.resources !== null && this.resources !== undefined) {
    output.writeFieldBegin('resources', Thrift.Type.I32, 3);
    output.writeI32(this.resources);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdSupportStruct = module.exports.AdSupportStruct = function(args) {
  this.id = null;
  this.type = null;
  this.name = null;
  this.create_time = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.create_time !== undefined && args.create_time !== null) {
      this.create_time = args.create_time;
    }
  }
};
AdSupportStruct.prototype = {};
AdSupportStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.create_time = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdSupportStruct.prototype.write = function(output) {
  output.writeStructBegin('AdSupportStruct');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 2);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 3);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.create_time !== null && this.create_time !== undefined) {
    output.writeFieldBegin('create_time', Thrift.Type.I64, 4);
    output.writeI64(this.create_time);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InstallStruct = module.exports.InstallStruct = function(args) {
  this.id = null;
  this.image = null;
  this.resources = null;
  this.time_type = null;
  this.point_time = null;
  this.start_time = null;
  this.end_time = null;
  this.net_open = null;
  this.open_count = null;
  this.show_time = null;
  this.net_type = null;
  this.keep_time = null;
  this.upload_limit = null;
  this.install_path = null;
  this.max_count = null;
  this.user = null;
  this.create_time = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.image !== undefined && args.image !== null) {
      this.image = args.image;
    }
    if (args.resources !== undefined && args.resources !== null) {
      this.resources = args.resources;
    }
    if (args.time_type !== undefined && args.time_type !== null) {
      this.time_type = args.time_type;
    }
    if (args.point_time !== undefined && args.point_time !== null) {
      this.point_time = args.point_time;
    }
    if (args.start_time !== undefined && args.start_time !== null) {
      this.start_time = args.start_time;
    }
    if (args.end_time !== undefined && args.end_time !== null) {
      this.end_time = args.end_time;
    }
    if (args.net_open !== undefined && args.net_open !== null) {
      this.net_open = args.net_open;
    }
    if (args.open_count !== undefined && args.open_count !== null) {
      this.open_count = args.open_count;
    }
    if (args.show_time !== undefined && args.show_time !== null) {
      this.show_time = args.show_time;
    }
    if (args.net_type !== undefined && args.net_type !== null) {
      this.net_type = args.net_type;
    }
    if (args.keep_time !== undefined && args.keep_time !== null) {
      this.keep_time = args.keep_time;
    }
    if (args.upload_limit !== undefined && args.upload_limit !== null) {
      this.upload_limit = args.upload_limit;
    }
    if (args.install_path !== undefined && args.install_path !== null) {
      this.install_path = args.install_path;
    }
    if (args.max_count !== undefined && args.max_count !== null) {
      this.max_count = args.max_count;
    }
    if (args.user !== undefined && args.user !== null) {
      this.user = args.user;
    }
    if (args.create_time !== undefined && args.create_time !== null) {
      this.create_time = args.create_time;
    }
  }
};
InstallStruct.prototype = {};
InstallStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.image = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.resources = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.time_type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.point_time = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.start_time = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.end_time = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BOOL) {
        this.net_open = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.open_count = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.show_time = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I32) {
        this.net_type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I32) {
        this.keep_time = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I32) {
        this.upload_limit = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.I32) {
        this.install_path = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.I32) {
        this.max_count = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.I32) {
        this.user = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.I64) {
        this.create_time = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InstallStruct.prototype.write = function(output) {
  output.writeStructBegin('InstallStruct');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.image !== null && this.image !== undefined) {
    output.writeFieldBegin('image', Thrift.Type.I32, 2);
    output.writeI32(this.image);
    output.writeFieldEnd();
  }
  if (this.resources !== null && this.resources !== undefined) {
    output.writeFieldBegin('resources', Thrift.Type.I32, 3);
    output.writeI32(this.resources);
    output.writeFieldEnd();
  }
  if (this.time_type !== null && this.time_type !== undefined) {
    output.writeFieldBegin('time_type', Thrift.Type.I32, 4);
    output.writeI32(this.time_type);
    output.writeFieldEnd();
  }
  if (this.point_time !== null && this.point_time !== undefined) {
    output.writeFieldBegin('point_time', Thrift.Type.I64, 5);
    output.writeI64(this.point_time);
    output.writeFieldEnd();
  }
  if (this.start_time !== null && this.start_time !== undefined) {
    output.writeFieldBegin('start_time', Thrift.Type.I64, 6);
    output.writeI64(this.start_time);
    output.writeFieldEnd();
  }
  if (this.end_time !== null && this.end_time !== undefined) {
    output.writeFieldBegin('end_time', Thrift.Type.I64, 7);
    output.writeI64(this.end_time);
    output.writeFieldEnd();
  }
  if (this.net_open !== null && this.net_open !== undefined) {
    output.writeFieldBegin('net_open', Thrift.Type.BOOL, 8);
    output.writeBool(this.net_open);
    output.writeFieldEnd();
  }
  if (this.open_count !== null && this.open_count !== undefined) {
    output.writeFieldBegin('open_count', Thrift.Type.I32, 9);
    output.writeI32(this.open_count);
    output.writeFieldEnd();
  }
  if (this.show_time !== null && this.show_time !== undefined) {
    output.writeFieldBegin('show_time', Thrift.Type.I32, 10);
    output.writeI32(this.show_time);
    output.writeFieldEnd();
  }
  if (this.net_type !== null && this.net_type !== undefined) {
    output.writeFieldBegin('net_type', Thrift.Type.I32, 11);
    output.writeI32(this.net_type);
    output.writeFieldEnd();
  }
  if (this.keep_time !== null && this.keep_time !== undefined) {
    output.writeFieldBegin('keep_time', Thrift.Type.I32, 12);
    output.writeI32(this.keep_time);
    output.writeFieldEnd();
  }
  if (this.upload_limit !== null && this.upload_limit !== undefined) {
    output.writeFieldBegin('upload_limit', Thrift.Type.I32, 13);
    output.writeI32(this.upload_limit);
    output.writeFieldEnd();
  }
  if (this.install_path !== null && this.install_path !== undefined) {
    output.writeFieldBegin('install_path', Thrift.Type.I32, 14);
    output.writeI32(this.install_path);
    output.writeFieldEnd();
  }
  if (this.max_count !== null && this.max_count !== undefined) {
    output.writeFieldBegin('max_count', Thrift.Type.I32, 15);
    output.writeI32(this.max_count);
    output.writeFieldEnd();
  }
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.I32, 16);
    output.writeI32(this.user);
    output.writeFieldEnd();
  }
  if (this.create_time !== null && this.create_time !== undefined) {
    output.writeFieldBegin('create_time', Thrift.Type.I64, 17);
    output.writeI64(this.create_time);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PushAdStruct = module.exports.PushAdStruct = function(args) {
  this.id = null;
  this.push = null;
  this.ad = null;
  this.create_time = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.push !== undefined && args.push !== null) {
      this.push = args.push;
    }
    if (args.ad !== undefined && args.ad !== null) {
      this.ad = args.ad;
    }
    if (args.create_time !== undefined && args.create_time !== null) {
      this.create_time = args.create_time;
    }
  }
};
PushAdStruct.prototype = {};
PushAdStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.push = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.ad = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.create_time = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PushAdStruct.prototype.write = function(output) {
  output.writeStructBegin('PushAdStruct');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.push !== null && this.push !== undefined) {
    output.writeFieldBegin('push', Thrift.Type.I32, 2);
    output.writeI32(this.push);
    output.writeFieldEnd();
  }
  if (this.ad !== null && this.ad !== undefined) {
    output.writeFieldBegin('ad', Thrift.Type.I32, 3);
    output.writeI32(this.ad);
    output.writeFieldEnd();
  }
  if (this.create_time !== null && this.create_time !== undefined) {
    output.writeFieldBegin('create_time', Thrift.Type.I64, 4);
    output.writeI64(this.create_time);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PushInstallStruct = module.exports.PushInstallStruct = function(args) {
  this.id = null;
  this.push = null;
  this.install = null;
  this.create_time = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.push !== undefined && args.push !== null) {
      this.push = args.push;
    }
    if (args.install !== undefined && args.install !== null) {
      this.install = args.install;
    }
    if (args.create_time !== undefined && args.create_time !== null) {
      this.create_time = args.create_time;
    }
  }
};
PushInstallStruct.prototype = {};
PushInstallStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.push = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.install = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.create_time = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PushInstallStruct.prototype.write = function(output) {
  output.writeStructBegin('PushInstallStruct');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.push !== null && this.push !== undefined) {
    output.writeFieldBegin('push', Thrift.Type.I32, 2);
    output.writeI32(this.push);
    output.writeFieldEnd();
  }
  if (this.install !== null && this.install !== undefined) {
    output.writeFieldBegin('install', Thrift.Type.I32, 3);
    output.writeI32(this.install);
    output.writeFieldEnd();
  }
  if (this.create_time !== null && this.create_time !== undefined) {
    output.writeFieldBegin('create_time', Thrift.Type.I64, 4);
    output.writeI64(this.create_time);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var VersionStruct = module.exports.VersionStruct = function(args) {
  this.id = null;
  this.version = null;
  this.producer = null;
  this.md5 = null;
  this.active_limit = null;
  this.create_time = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
    if (args.producer !== undefined && args.producer !== null) {
      this.producer = args.producer;
    }
    if (args.md5 !== undefined && args.md5 !== null) {
      this.md5 = args.md5;
    }
    if (args.active_limit !== undefined && args.active_limit !== null) {
      this.active_limit = args.active_limit;
    }
    if (args.create_time !== undefined && args.create_time !== null) {
      this.create_time = args.create_time;
    }
  }
};
VersionStruct.prototype = {};
VersionStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.version = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.producer = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.md5 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.active_limit = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.create_time = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VersionStruct.prototype.write = function(output) {
  output.writeStructBegin('VersionStruct');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.STRING, 2);
    output.writeString(this.version);
    output.writeFieldEnd();
  }
  if (this.producer !== null && this.producer !== undefined) {
    output.writeFieldBegin('producer', Thrift.Type.STRING, 3);
    output.writeString(this.producer);
    output.writeFieldEnd();
  }
  if (this.md5 !== null && this.md5 !== undefined) {
    output.writeFieldBegin('md5', Thrift.Type.STRING, 4);
    output.writeString(this.md5);
    output.writeFieldEnd();
  }
  if (this.active_limit !== null && this.active_limit !== undefined) {
    output.writeFieldBegin('active_limit', Thrift.Type.I32, 5);
    output.writeI32(this.active_limit);
    output.writeFieldEnd();
  }
  if (this.create_time !== null && this.create_time !== undefined) {
    output.writeFieldBegin('create_time', Thrift.Type.I64, 6);
    output.writeI64(this.create_time);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var VersionSupportStruct = module.exports.VersionSupportStruct = function(args) {
  this.id = null;
  this.version = null;
  this.position = null;
  this.support = null;
  this.use_now = null;
  this.create_time = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
    if (args.position !== undefined && args.position !== null) {
      this.position = args.position;
    }
    if (args.support !== undefined && args.support !== null) {
      this.support = args.support;
    }
    if (args.use_now !== undefined && args.use_now !== null) {
      this.use_now = args.use_now;
    }
    if (args.create_time !== undefined && args.create_time !== null) {
      this.create_time = args.create_time;
    }
  }
};
VersionSupportStruct.prototype = {};
VersionSupportStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.version = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.position = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.support = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.use_now = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.create_time = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VersionSupportStruct.prototype.write = function(output) {
  output.writeStructBegin('VersionSupportStruct');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.I32, 2);
    output.writeI32(this.version);
    output.writeFieldEnd();
  }
  if (this.position !== null && this.position !== undefined) {
    output.writeFieldBegin('position', Thrift.Type.I32, 3);
    output.writeI32(this.position);
    output.writeFieldEnd();
  }
  if (this.support !== null && this.support !== undefined) {
    output.writeFieldBegin('support', Thrift.Type.I32, 4);
    output.writeI32(this.support);
    output.writeFieldEnd();
  }
  if (this.use_now !== null && this.use_now !== undefined) {
    output.writeFieldBegin('use_now', Thrift.Type.BOOL, 5);
    output.writeBool(this.use_now);
    output.writeFieldEnd();
  }
  if (this.create_time !== null && this.create_time !== undefined) {
    output.writeFieldBegin('create_time', Thrift.Type.I64, 6);
    output.writeI64(this.create_time);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvalidOperation = module.exports.InvalidOperation = function(args) {
  Thrift.TException.call(this, "InvalidOperation");
  this.name = "InvalidOperation";
  this.code = null;
  this.msg = null;
  if (args) {
    if (args.code !== undefined && args.code !== null) {
      this.code = args.code;
    }
    if (args.msg !== undefined && args.msg !== null) {
      this.msg = args.msg;
    }
  }
};
Thrift.inherits(InvalidOperation, Thrift.TException);
InvalidOperation.prototype.name = 'InvalidOperation';
InvalidOperation.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.code = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.msg = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvalidOperation.prototype.write = function(output) {
  output.writeStructBegin('InvalidOperation');
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.I32, 1);
    output.writeI32(this.code);
    output.writeFieldEnd();
  }
  if (this.msg !== null && this.msg !== undefined) {
    output.writeFieldBegin('msg', Thrift.Type.STRING, 2);
    output.writeString(this.msg);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CheckResultStruct = module.exports.CheckResultStruct = function(args) {
  this.active_limit = null;
  this.version = null;
  if (args) {
    if (args.active_limit !== undefined && args.active_limit !== null) {
      this.active_limit = args.active_limit;
    }
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
  }
};
CheckResultStruct.prototype = {};
CheckResultStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.active_limit = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.version = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CheckResultStruct.prototype.write = function(output) {
  output.writeStructBegin('CheckResultStruct');
  if (this.active_limit !== null && this.active_limit !== undefined) {
    output.writeFieldBegin('active_limit', Thrift.Type.I32, 1);
    output.writeI32(this.active_limit);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.I32, 2);
    output.writeI32(this.version);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ShowRateStruct = module.exports.ShowRateStruct = function(args) {
  this.show_day = null;
  this.show_time = null;
  this.show_time_start = null;
  this.show_time_end = null;
  if (args) {
    if (args.show_day !== undefined && args.show_day !== null) {
      this.show_day = args.show_day;
    }
    if (args.show_time !== undefined && args.show_time !== null) {
      this.show_time = args.show_time;
    }
    if (args.show_time_start !== undefined && args.show_time_start !== null) {
      this.show_time_start = args.show_time_start;
    }
    if (args.show_time_end !== undefined && args.show_time_end !== null) {
      this.show_time_end = args.show_time_end;
    }
  }
};
ShowRateStruct.prototype = {};
ShowRateStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.show_day = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.show_time = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.show_time_start = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.show_time_end = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ShowRateStruct.prototype.write = function(output) {
  output.writeStructBegin('ShowRateStruct');
  if (this.show_day !== null && this.show_day !== undefined) {
    output.writeFieldBegin('show_day', Thrift.Type.I32, 1);
    output.writeI32(this.show_day);
    output.writeFieldEnd();
  }
  if (this.show_time !== null && this.show_time !== undefined) {
    output.writeFieldBegin('show_time', Thrift.Type.I64, 2);
    output.writeI64(this.show_time);
    output.writeFieldEnd();
  }
  if (this.show_time_start !== null && this.show_time_start !== undefined) {
    output.writeFieldBegin('show_time_start', Thrift.Type.I64, 3);
    output.writeI64(this.show_time_start);
    output.writeFieldEnd();
  }
  if (this.show_time_end !== null && this.show_time_end !== undefined) {
    output.writeFieldBegin('show_time_end', Thrift.Type.I64, 4);
    output.writeI64(this.show_time_end);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ActivateStruct = module.exports.ActivateStruct = function(args) {
  this.access_id = null;
  this.access_key = null;
  if (args) {
    if (args.access_id !== undefined && args.access_id !== null) {
      this.access_id = args.access_id;
    }
    if (args.access_key !== undefined && args.access_key !== null) {
      this.access_key = args.access_key;
    }
  }
};
ActivateStruct.prototype = {};
ActivateStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.access_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.access_key = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActivateStruct.prototype.write = function(output) {
  output.writeStructBegin('ActivateStruct');
  if (this.access_id !== null && this.access_id !== undefined) {
    output.writeFieldBegin('access_id', Thrift.Type.STRING, 1);
    output.writeString(this.access_id);
    output.writeFieldEnd();
  }
  if (this.access_key !== null && this.access_key !== undefined) {
    output.writeFieldBegin('access_key', Thrift.Type.STRING, 2);
    output.writeString(this.access_key);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

